name: Build, Push, and Deploy

on:
  push:
    branches:
       - 'develop'
       - 'master'
    tags:
      - 'v.*'
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
      - 'reopened'
      - 'closed'
    branches:
      - 'develop'
      - 'master'

jobs:
  docker:
    name: Build Container Image
    runs-on: ubuntu-latest
    outputs:
      deploy_tag: ${{ steps.deploy-tag.outputs.deploy_tag }}
      image_name: ${{ steps.deploy-tag.outputs.image_name }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            gcr.io/skyviewer/rubinobs-api,enable=${{ github.ref != 'master' && github.ref_type != 'tag' && github.base_ref == 'develop' }}
            gcr.io/edc-int-6c5e/rubinobs-api,enable=${{ github.ref == 'master' || github.base_ref == 'master'}}
            gcr.io/edc-prod-eef0/rubinobs-api,enable=${{ github.ref_type == 'tag'}}
          flavor: |
            latest=${{ github.event_name == 'push'}}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      -
        name: Parse deployment tag
        id: deploy-tag
        run: |
          python -c 'import yaml;f=open("docker-compose.yml");y=yaml.safe_load(f)'
          full_tag=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[] | select(. | test(":sha-|:v."))')
          echo "$full_tag"
          echo deploy_tag=$(echo "$full_tag" | cut -f2 -d:) >> "$GITHUB_OUTPUT"
          echo image_name=$(echo "$full_tag" | cut -f1 -d:) >> "$GITHUB_OUTPUT"

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Login to GCP Dev
        uses: 'google-github-actions/auth@v2'
        if: ${{ github.ref != 'master' && github.ref_type != 'tag' && github.base_ref == 'develop' }}
        with:
          credentials_json: ${{ secrets.DEV_SA_KEY }}
      - 
        name: Login to GCP Int
        uses: 'google-github-actions/auth@v2'
        if: ${{ github.ref == 'master' || github.base_ref == 'master'}}
        with:
          credentials_json: ${{ secrets.SKYVIEWER_INT_SERVICE_ACCOUNT }}
      - 
        name: Login to GCP Prod
        uses: 'google-github-actions/auth@v2'
        if: ${{ github.ref_type == 'tag' }}
        with:
          credentials_json: ${{ secrets.PIPELINE_EPO_PROD_PROJECT  }}
      - 
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - 
        run: gcloud --quiet auth configure-docker
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: |
            type=gha
          cache-from: |
            type=gha
          build-args: |
            BASE_TAG=k8s

  deploy-prod:
    name: Deploy Prod
    needs: docker
    uses: ./.github/workflows/deploy-gke.yaml
    secrets: inherit
    if: ${{ github.ref_type == 'tag' }}
    with:
      environment: prod
      image_tag: ${{ needs.docker.outputs.deploy_tag }}
      image_name: ${{ needs.docker.outputs.image_name }}
  
  deploy-int:
    name: Deploy Int
    needs: docker
    runs-on: ubuntu-latest
    # uses: ./.github/workflows/deploy-gke.yaml
    if: ${{ github.ref == 'master' || (github.base_ref == 'master') }}
    steps:
      - name: Generate Webhook Payload
        id: payload
        run: |-
          export PARAMETERS="api.image.tag=${{ needs.docker.outputs.deploy_tag }}
          api.image.repository=${{ needs.docker.outputs.image_name }}"
          export DATA="{
            \"event_type\": \"app_update_values\",
            \"client_payload\": {
              \"app_name\": \"rubinobs-site\",
              \"environment_name\": \"int\",
              \"parameters\": $(echo $PARAMETERS | jq -Rn '[inputs]')
            }
          }"
          echo "data=$(echo $DATA | jq -rc '.')" >> "$GITHUB_OUTPUT"
      - name: Call Deployment Webhook
        env:
          WEBHOOK_URL: https://api.github.com/repos/lsst-epo/edc-deploy/dispatches
        run: |-
            curl -L \
            -X POST \
            $WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -H "Accept: application/vnd.github+json" \
            -H 'Authorization: Bearer ${{ github.token }}' \
            -d "${{ fromJson(steps.payload.outputs.data) }}"